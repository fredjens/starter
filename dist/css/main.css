@charset "UTF-8";
/*------------------------------------------------------*/
/*------------------------------------------------------*/
/*------------------------------------------------------*/
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);
@import url(https://fonts.googleapis.com/css?family=Merriweather:400,300,300italic,400italic,700,700italic,900,900italic);
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*------------------------------------------------------*/
/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

img {
  max-width: 100%; }

body {
  margin: 0;
  padding: 0;
  padding: 20px;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.5;
  color: #444;
  text-rendering: optimizeLegibility;
  background: seagreen;
  font-family: "Montserrat", "Helvetica", sans-serif; }

h1 {
  font-size: 2rem;
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: 10px;
  color: #000; }
  @media screen and (min-width: 480px) {
    h1 {
      font-size: 2.5rem; } }
  @media screen and (min-width: 720px) {
    h1 {
      font-size: 3rem; } }
  @media screen and (min-width: 960px) {
    h1 {
      font-size: 4rem; } }
  @media screen and (min-width: 1200px) {
    h1 {
      font-size: 6rem; } }

h2, h3 {
  font-size: 1rem;
  color: #000;
  font-weight: 100;
  letter-spacing: 2px;
  margin-top: 30px;
  margin-bottom: 5px; }
  @media screen and (min-width: 720px) {
    h2, h3 {
      font-size: 1.4rem; } }

p {
  font-family: "Merriweather", "Georgia", serif;
  margin-top: 0;
  margin-bottom: 30px; }
  @media (min-width: 720px) {
    p {
      font-size: 1.2rem; } }

p.lead {
  font-size: 1.2rem;
  font-weight: 400; }
  @media (min-width: 720px) {
    p.lead {
      font-size: 1.6rem; } }

p.small {
  font-size: 1rem;
  color: gray; }

a {
  color: #08180f;
  text-decoration: none;
  transition: color .3s ease-out; }
  a:hover {
    color: #0e2b1b; }

article a {
  border-bottom: 1px solid #999; }

article a:hover {
  color: seagreen; }

ul {
  padding-left: 0;
  list-style: none; }

blockquote {
  text-align: center;
  margin: 50px 0; }
  blockquote p {
    font-size: 2rem;
    text-align: center;
    margin: 50px 0;
    font-style: italic;
    margin-bottom: 10px; }
  blockquote cite {
    font-style: normal; }

::-moz-selection {
  background-color: #1b5233;
  color: #ffffff; }

::selection {
  background-color: #1b5233;
  color: #ffffff; }

main {
  background: #fff; }

article {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  padding: 10px 20px;
  margin-top: 20px; }
  article:after {
    content: " ";
    display: block;
    clear: both; }
  @media (min-width: 720px) {
    article {
      padding: 100px 20px; } }

nav {
  font-size: 2rem;
  margin-top: 20px; }
  nav a {
    color: #1e5b39;
    display: block; }

nav a.active {
  color: #0e2b1b; }

h2.pattern {
  border-bottom: 1px solid #1b5233;
  margin-bottom: 20px; }

.roundImage {
  width: 100%;
  height: 0;
  padding: 50% 0;
  border-radius: 50%;
  background: #eee;
  overflow: hidden;
  margin: 1rem 0;
  position: relative; }
  .roundImage .roundImage__image {
    margin-top: -50%; }

/*------------------------------------------------------*   Card
\*------------------------------------------------------*/
.card {
  font-size: 1rem;
  text-align: center;
  float: left;
  width: 100%;
  background: #fff;
  margin-bottom: 30px; }
  @media (min-width: 480px) {
    .card {
      margin-bottom: 0;
      color: #fff;
      background: #000;
      height: 400px;
      overflow: hidden;
      position: relative; } }
  @media (min-width: 960px) {
    .card {
      width: 50%; } }
  .card__image {
    position: relative;
    margin: 0;
    max-height: 400px;
    overflow: hidden;
    width: 100%;
    transition: width 1s cubic-bezier(0.4, 0.54, 0.48, 0.62); }
    @media (min-width: 480px) {
      .card__image:before {
        position: absolute;
        content: ' ';
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background: linear-gradient(rgba(0, 0, 0, 0.1) 0%, rgba(0, 0, 0, 0.7) 100%);
        overflow: hidden; } }
  .card__content {
    padding: 20px; }
    @media (min-width: 480px) {
      .card__content {
        position: absolute;
        bottom: 40px;
        padding: 0 40px;
        width: 100%;
        transition: bottom 0.3s cubic-bezier(0.01, 0.58, 0.38, 1.01); } }
  .card__category {
    display: inline-block;
    padding: 2px 6px;
    font-size: .65em;
    border: 1px solid #444;
    color: #444;
    text-transform: uppercase;
    letter-spacing: 3px; }
    @media (min-width: 480px) {
      .card__category {
        color: #fff;
        border: 1px solid #fff; } }
  .card__title {
    font-size: 1.4em;
    margin: 10px 0; }
    @media (min-width: 480px) {
      .card__title {
        color: #fff;
        font-size: 2.3em; } }
  .card__lead {
    margin-bottom: 10px; }
  .card__author {
    font-size: .8em; }
    .card__author a {
      border-bottom: 1px solid #000; }
      @media (min-width: 480px) {
        .card__author a {
          color: #fff;
          border-bottom: 1px solid #fff; } }
  .card__more {
    display: none; }
    @media (min-width: 480px) {
      .card__more {
        display: inline-block;
        position: absolute;
        width: 120px;
        bottom: -100px;
        margin: 0 auto;
        right: 0;
        left: 0;
        font-weight: 900;
        transition: bottom 0.5s cubic-bezier(0.01, 0.58, 0.38, 1.01); }
        .card__more:after {
          content: "→";
          display: block;
          border: 1px solid #fff;
          width: 25px;
          height: 25px;
          border-radius: 60px;
          margin: 0 auto;
          margin-top: 10px;
          bottom: -100px;
          margin-bottom: 0; } }
  .card:hover .card__content {
    bottom: 120px; }
  .card:hover .card__more {
    bottom: 30px; }
    .card:hover .card__more:after {
      margin-bototm: -10px; }
  @media (min-width: 480px) {
    .card:hover .card__image {
      width: 105%;
      transition: 0; } }

.breakpoints {
  background-color: rgba(0, 0, 0, 0.4);
  color: rgba(255, 255, 255, 0.5);
  z-index: 999;
  position: fixed;
  bottom: 0;
  right: 0;
  padding: 4px 8px;
  font-size: 14px; }
  .breakpoints:before {
    content: 'Smallest'; }
  @media (min-width: 480px) {
    .breakpoints:before {
      content: 'Small'; } }
  @media (min-width: 720px) {
    .breakpoints:before {
      content: 'Medium'; } }
  @media (min-width: 960px) {
    .breakpoints:before {
      content: 'Large'; } }
  @media (min-width: 1200px) {
    .breakpoints:before {
      content: 'Wide'; } }

/*# sourceMappingURL=data:application/json;base64, */
